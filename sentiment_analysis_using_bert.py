# -*- coding: utf-8 -*-
"""Sentiment_Analysis_using_BERT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1luQUY1ogx-O0xVUPbR9o0SJs2ylD_rDv
"""

!pip install -q transformers

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np

df2 = pd.read_csv('/content/drive/MyDrive/Tower_Sentiment.csv')
#Dropping columns that do not need to be read
df2.drop(df2.columns[[4,5]], axis=1, inplace=True)
df2.head()

# df2['Text'] = df2['Text'].fillna('')
# grouped_df = df2.groupby('ID').agg({'Text': '. '.join, 'Sentiment': 'first'}).reset_index()
# grouped_df.head()
# #len(grouped_df)

# Assuming you have imported pandas as pd and have the DataFrame df2

# Fill missing values in the 'Text' column with an empty string
df2['Text'] = df2['Text'].fillna('')

# Filter out rows where the 'Source' column is 'bot'
df2 = df2.drop(df2[df2['Source'] == 'bot'].index)

# Group by 'ID' and concatenate the 'Text' for each group separated by a period ('.')
grouped_df = df2.groupby('ID').agg({'Text': '. '.join, 'Sentiment': 'first'}).reset_index()

# Print the first few rows of the grouped DataFrame
print(grouped_df.head())

# Extract the 'Text' paragraph of the first group and store it in a variable
text_paragraph = grouped_df['Text'][0]

print(text_paragraph)

text_paragraph = grouped_df['Text'][5]
print(text_paragraph)

from transformers import pipeline
sentiment_pipeline = pipeline("sentiment-analysis")

#ai processing the data
sentiment_pipeline(text_paragraph)

#dont look at this, all the one after this is still work on progress
#anyhting after this is to be changed cuz idk wat im doing

# Import necessary libraries
import numpy as np
import pandas as pd
import seaborn as sns
from pylab import rcParams
import matplotlib.pyplot as plt
from matplotlib import rc
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report
from collections import defaultdict
from textwrap import wrap

# Torch ML libraries
import transformers
from transformers import BertModel, BertTokenizer, AdamW, get_linear_schedule_with_warmup
import torch
from torch import nn, optim
from torch.utils.data import Dataset, DataLoader

# Misc.
import warnings
warnings.filterwarnings('ignore')

# Commented out IPython magic to ensure Python compatibility.
# Set intial variables and constants
# %config InlineBackend.figure_format='retina'

# Graph Designs
sns.set(style='whitegrid', palette='muted', font_scale=1.2)
HAPPY_COLORS_PALETTE = ["#01BEFE", "#FFDD00", "#FF7D00", "#FF006D", "#ADFF02", "#8F00FF"]
sns.set_palette(sns.color_palette(HAPPY_COLORS_PALETTE))
rcParams['figure.figsize'] = 12, 8

# Random seed for reproducibilty
RANDOM_SEED = 42
np.random.seed(RANDOM_SEED)
torch.manual_seed(RANDOM_SEED)

# Set GPU
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# looking at distribution
sns.countplot(df.score)
plt.xlabel(''); #use the name of the column to see distribution of sentiment data

